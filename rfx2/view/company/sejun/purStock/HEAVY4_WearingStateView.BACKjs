Ext.define('Rfx2.view.company.sejun.purStock.HEAVY4_WearingStateView', {
    extend: 'Rfx2.base.BaseView',
    xtype: 'wearing-view',
    initComponent: function () {

        //order by 에서 자동 테이블명 붙이기 켜기.
        this.orderbyAutoTable = true;
        useMultitoolbar = true;

        //검색툴바 필드 초기화
        this.initSearchField();

        this.addSearchField({
            field_id: 'date_type',
            store: 'DatetypeStore',
            displayField: 'codeName',
            valueField: 'systemCode',
            innerTpl: '<div data-qtip="{codeNameEn}">{codeName}</div>'
        });

        this.addSearchField({
            type: 'dateRange',
            field_id: 'listpodate',
            labelWidth: 0,
            sdate: Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            edate: new Date()
        });

        //this.addSearchField('project_varchar6');
        this.addSearchField('item_code');
        this.addSearchField('item_name');
        //this.addSearchField('specification');

        //명령툴바 생성
        var buttonToolbar = this.createCommandToolbar();

        var myCartModel = Ext.create('Rfx.model.MyCartLineSrcahdGo', {
            fields: this.fields
        });

        this.myCartStore = new Ext.data.Store({
            pageSize: 100,
            model: myCartModel,
            sorters: [{
                property: 'create_date',
                direction: 'desc'
            }

            ]
        });

        this.createStore('Rfx.model.WarehousingState', [{
                property: 'unique_id',
                direction: 'DESC'
            }],
            gm.pageSize
        );

        // remove the items
        (buttonToolbar.items).each(function (item, index, length) {
            if (index == 1 || index == 2 || index == 3 || index == 4 || index == 5) {
                buttonToolbar.items.remove(item);
            }
        });

        this.setRowClass(function (record, index) {
            var uid_srccst = record.get('uid_srccst');
            var change_reason = record.get('change_reason');
            console_logs('===dasdas', change_reason);
            if (uid_srccst != null && uid_srccst != undefined && uid_srccst > 1) {
                if (change_reason == '') {
                    return 'green-row';
                }
                var len = change_reason.split(',').length;
                for (var i = 0; i < len; i++) {
                    var s = change_reason.split(',')[i];
                    console_logs('===ss', s);
                    if (s == 'G') {
                        return 'yellow-row';
                        break;
                    } else {
                        return 'green-row';
                    }
                }

            }
        });

        //그리드 생성
        var arr = [];
        arr.push(buttonToolbar);
        var searchToolbar = this.createSearchToolbar();
        arr.push(searchToolbar);

        var option = {};

        //grid 생성.
        this.createGridCore(arr, option);
        this.createCrudTab();

        Ext.apply(this, {
            layout: 'border',
            items: [this.grid, this.crudTab]
        });


        this.setAllMatView = Ext.create('Ext.Action', {
            xtype: 'button',
            text: '전체',
            tooltip: '전체',
            toggleGroup: 'matType',
            handler: function () {
                gm.me().store.getProxy().setExtraParams({});
                gm.me().store.load(function () {
                });
            }
        });

        this.setSaMatView = Ext.create('Ext.Action', {
            xtype: 'button',
            text: '원자재',
            tooltip: '원자재',
            toggleGroup: 'matType',
            handler: function () {
                this.matType = 'RAW';
                gm.me().store.getProxy().setExtraParams({});
                gm.me().store.getProxy().setExtraParam('sp_code', 'S');
                gm.me().store.load(function () {
                });
            }
        });

        this.setSubMatView = Ext.create('Ext.Action', {
            xtype: 'button',
            text: '부자재',
            tooltip: '부자재',
            toggleGroup: 'matType',
            handler: function () {
                this.matType = 'SUB';
                gm.me().store.getProxy().setExtraParams({});
                gm.me().store.getProxy().setExtraParam('sp_code', 'K');
                gm.me().store.load(function () {
                });
            }
        });

        //구매자재 입고 포장별 바코드 출력 생성
        this.createGoodsIn = Ext.create('Ext.Action', {
            iconCls: 'barcode',
            text: '자재 입고 바코드',
            tooltip: '자재 입고 바코드',
            disabled: true,
            handler: function () {

                // selections 교체

                var selections = gm.me().grid.getSelection();

                var uniqueIdArr = [];
                var bararr = [];

                var cartmap_uid_array = [];
                var srcahd_uid_array = [];
                var item_code_uid_array = [];
                var item_name_uid_array = [];
                var po_no_arr = [];
                var pj_uids = [];
                var gr_quan_arr = [];
                var pcs_desc_arr = [];
                var date_stamps = [];

                var countPlus = 0;

                var lotNoSelect = [];

                var specArr = [];
                //포장수량(바코드 수량과 1대1)
                var gr_Qty = null;
                var areaCode = null;

                var lot_no = selections[0].get('area_code');


                for (var i = 0; i < selections.length; i++) {

                    var rec = selections[i];
                    console_logs('rec', rec);
                    var uid = rec.get('unique_id');  //rtgast unique_id???
                    var item_code = rec.get('item_code');
                    var item_name = rec.get('item_name');
                    var specification = rec.get('specification');
                    var gr_date = rec.get('gr_date');
                    var date_stamp = rec.get('ar_date');

                    specArr.push(specification);


                    var bar_spec = rec.get('barcode');

                    // var bar_spec = item_code + '|' + item_name + '|' + specification;
                    var srcahd_uid = rec.get('srcahd_uid');

                    var GrQuan = rec.get('gr_qty');
                    var pcs_desc_group_assy = rec.get('pcs_desc_group_assy');

                    pcs_desc_arr.push(pcs_desc_group_assy);
                    gr_quan_arr.push(GrQuan);

                    uniqueIdArr.push(uid);
                    bararr.push(bar_spec);
                    cartmap_uid_array.push(uid);
                    srcahd_uid_array.push(srcahd_uid);

                    console_logs('srcahd_uid 출력 >>> ' + srcahd_uid);

                    gr_Qty = rec.get(('gr_qty'));
                    console_logs('입고수량 gr_Qty 출력 >>> ' + gr_Qty);
                    areaCode = rec.get(('area_code'));

                    console_logs('areaCode 출력 >>> ' + areaCode);

                    item_code_uid_array.push(item_code);
                    item_name_uid_array.push(item_name);

                    date_stamps.push(date_stamp);

                }
                //셀렉션 붙임 끝

                var boxPacking = null;

                var printQuan = null;

                var barcodeForm = Ext.create('Ext.form.Panel', {
                    xtype: 'form',
                    frame: false,
                    border: false,
                    autoScroll: true,
                    bodyPadding: 10,
                    region: 'center',
                    layout: 'vbox',
                    width: 500,
                    height: 200,
                    items: [
                        {
                            xtype: 'container',
                            width: '100%',
                            defaults: {
                                width: '90%',
                                padding: '3 3 3 3',
                            },
                            border: true,
                            layout: 'column',
                            items: [
                                {
                                    fieldLabel: '프린터',
                                    labelWidth: 80,
                                    xtype: 'combo',
                                    margin: '5 5 5 5',
                                    id: gu.id('printer'),
                                    name: 'printIpAddress',
                                    store: Ext.create('Mplm.store.PrinterStore'),
                                    displayField: 'code_name_kr',
                                    valueField: 'system_code',
                                    emptyText: '프린터 선택',
                                    allowBlank: false
                                },
                                {
                                    fieldLabel: '프린트 라벨',
                                    labelWidth: 80,
                                    xtype: 'combo',
                                    margin: '5 5 5 5',
                                    id: gu.id('print_label'),
                                    name: 'labelSize',
                                    store: Ext.create('Mplm.store.PrintLabelStore'),
                                    displayField: 'code_name_kr',
                                    valueField: 'system_code',
                                    emptyText: '라벨 선택',
                                    allowBlank: false
                                }/*,
                                {
                                    xtype: 'textfield',
                                    name: 'print_qty',
                                    fieldLabel: '품명',
                                    margin: '5 5 5 5',
                                    editable: false,
                                    labelWidth: 80,
                                    allowBlank: false,
                                    value: item_name,
                                    maxlength: '1',
                                }*/
                            ],
                        }
                    ]
                });

                var comboPrinter = gu.getCmp('printer');
                comboPrinter.store.load(
                    function () {
                        this.each(function (record) {
                            var system_code = record.get('system_code');
                            if (system_code == '192.168.20.11') {
                                comboPrinter.select(record);
                            }
                        });
                    }
                );

                var comboLabel = gu.getCmp('print_label');
                comboLabel.store.load(
                    function () {
                        this.each(function (record) {
                            var system_code = record.get('system_code');
                            if (system_code == 'L100x80') {
                                comboLabel.select(record);
                            }
                        });
                    }
                );

                prWin = Ext.create('Ext.Window', {
                    modal: true,
                    title: '제품 바코드 출력  ',
                    width: 500,
                    height: 250,
                    plain: true,
                    items: barcodeForm,
                    // overflowY: 'scroll',
                    buttons: [{
                        text: '바코드 출력',

                        handler: function (btn) {

                            // var wdSelection = gm.me().gridWearingState.getSelectionModel().getSelection();
                            var selection = gm.me().grid.getSelectionModel().getSelection();

                            var totalIndex = selection.length;

                            var packingTotal = [];
                            var printTotal = [];

                            var packingCount = 0;
                            var printCount = 0;
                            var multiple = 0;

                            var intputLotno = [];

                            var quanArray = []; //포장수량 배열
                            var lotArray = []; //로트 배열
                            var printQuanArray = [];   //출력 매수 배열
                            var packingArray = [];
                            var srcahd_uids = [];


                            for (i = 0; i < totalIndex; i++) {

                                var rec = selection[i];

                                var packing = rec.get('gr_qty');
                                var printQuan = 1;
                                var input_lot = rec.get('area_code');
                                var srcahd_uid = rec.get('srcahd_uid');
                                quanArray.push(packing);
                                printQuanArray.push(printQuan);
                                lotArray.push(input_lot);
                                srcahd_uids.push(srcahd_uid);
                            }

                            if (btn == 'no') {
                                prWin.close();

                            } else {

                                if (printQuanArray == null || printQuanArray.length == 0) {
                                    gm.me().showToast('오류', "출력할 항목을 추가하세요.");
                                    return;
                                }

                                prWin.setLoading(true);
                                // 이게 출력

                                var printIpAddress = gu.getCmp('printer').getValue();
                                var labelSize = gu.getCmp('print_label').getValue();

                                Ext.Ajax.request({
                                    url: CONTEXT_PATH + '/sales/productStock.do?method=printSjBarcode',

                                    params: {
                                        date_stamps: date_stamps,
                                        print_type: 'EACH',
                                        countPlus: printQuan,
                                        print_qty: printQuan,
                                        printIpAddress: printIpAddress,
                                        label_size: labelSize,
                                        lotrtgastUids: uniqueIdArr,
                                        barcodes: bararr,
                                        lot_no: lot_no,
                                        cartmap_uid_list: cartmap_uid_array,
                                        srcahd_uids: srcahd_uid_array,
                                        item_codes: item_code_uid_array,
                                        item_names: item_name_uid_array,
                                        packing_qty: gr_quan_arr,
                                        gr_quan: gr_quan_arr,
                                        srcahd_uids : srcahd_uids,
                                        // gr_quan_list: gr_quan_arr,
                                        pcs_desc_list: pcs_desc_arr,
                                        barcode_type: 'warehousing',
                                        quanArray: quanArray,
                                        printQuanArray: printQuanArray,
                                        // lotArray: lotArray,
                                        lots: lotArray,
                                        specArr: specArr,
                                        gr_date: gr_date
                                    },


                                    success: function (result, request) {

                                        Ext.Msg.alert('', '바코드 프린터 출력 요청을 성공하였습니다.');

                                        prWin.setLoading(false);
                                        prWin.close();

                                    },

                                    failure: function (result, request) {

                                        Ext.Msg.alert('오류', '바코드 프린터 출력 요청을 실패하였습니다.</br>바코드 프린터 상태를 확인하시기 바랍니다.');

                                        prWin.setLoading(false);

                                    }
                                });

                            }
                        }
                    }, {
                        text: '취소',
                        handler: function () {
                            if (prWin) {
                                prWin.close();
                            }
                        }
                    }
                    ]
                });
                prWin.show();
            },

            //gm.me().printBarcode();

        });

        //버튼 추가.
        buttonToolbar.insert(5, '-');
        buttonToolbar.insert(5, this.setSubMatView);
        buttonToolbar.insert(5, this.setSaMatView);
        buttonToolbar.insert(5, this.setAllMatView);

        //입고 취소 Action 생성
        this.removeGoAction = Ext.create('Ext.Action', {
            iconCls: 'mfglabs-retweet_14_0_5395c4_none',
            // text: gm.getMC('CMD_Goods_receipt_cancellation', '입고 취소'),
            text: '반품처리',
            tooltip: '반품 처리',
            disabled: true,
            handler: function () {
                gm.me().treatremoveGo();
            }//handler end...

        });

        buttonToolbar.insert(1, '-');
        buttonToolbar.insert(1, this.removeGoAction);
        buttonToolbar.insert(1, this.createGoodsIn);
        this.callParent(arguments);

        this.grid.getSelectionModel().on({
            selectionchange: function (sm, selections) {

            }
        });

        //grid를 선택했을 때 Callback
        this.setGridOnCallback(function (selections) {

            if (selections.length) {
                gm.me().createGoodsIn.enable();
                gm.me().removeGoAction.enable();
            } else {
                gm.me().createGoodsIn.disable();
                gm.me().removeGoAction.disable();
            }

        })
        //디폴트 로드
        gm.setCenterLoading(false);//스토아로딩에서는 Loading Message를 끈다.
        this.store.load(function (records) {

        });

    },
    arrGrqty: [],
    wgrast_uids: [],
    lot_nos: [], //v
    item_codes: [], //v
    poviewType: 'ALL',
    treatremoveGo: function () {

        var form = Ext.create('Ext.form.Panel', {
            xtype: 'form',
            frame: false,
            border: false,
            bodyPadding: 10,
            region: 'center',
            layout: 'form',
            fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
            },
            items: [
                {
                    xtype: 'fieldset',
                    title: '입고 취소 수량을 입력하시기 바랍니다.</br>취소 수량은 우선 반품창고로 들어가고, 반품이 완료되면 재고가 감소됩니다.',
                    items: [
                        {
                            xtype: 'numberfield',
                            id: gu.id('cancel_quan'),
                            name: 'cancel_quan',
                            fieldLabel: '취소 수량',
                            margin: '3 3 3 3',
                            anchor: '97%',
                            allowBlank: false,
                            value: gm.me().grid.getSelectionModel().getSelection()[0].get('gr_qty')
                        },
                        {
                            fieldLabel: '취소 날짜',
                            xtype: 'datefield',
                            name: 'cancel_date',
                            id: gu.id('cancel_date'),
                            format: 'Y-m-d',
                            submitFormat: 'Y-m-d',// 'Y-m-d H:i:s',
                            dateFormat: 'Y-m-d',// 'Y-m-d H:i:s',
                            margin: '3 3 3 3',
                            value: new Date()
                        },
                        {
                            fieldLabel: '취소 사유',
                            xtype: 'textfield',
                            id: gu.id('cancel_reason'),
                            name: 'cancel_reason',
                            margin: '3 3 3 3',
                            anchor: '97%',
                        }
                    ]
                }
            ]
        });

        var prWin = Ext.create('Ext.Window', {
            modal: true,
            title: '입고취소',
            width: 450,
            height: 270,
            items: form,
            buttons: [
                {
                    text: CMD_OK,
                    scope: this,
                    handler: function () {



                        var rec = gm.me().grid.getSelectionModel().getSelection()[0];

                        var wgrastUid = rec.get('unique_id_long');
                        var cancelQuan = gu.getCmp('cancel_quan').getValue();
                        var cancelContent = gu.getCmp('cancel_reason').getValue();
                        var lotNo = rec.get('area_code');
                        var cancelDate = Ext.Date.format(gu.getCmp('cancel_date').getValue(), 'Y-m-d');
                        var expDate = rec.get('ar_date');

                        gm.me().setLoading(true);
                        Ext.Ajax.request({
                            url: CONTEXT_PATH + '/quality/wgrast.do?method=cancelGoodsReceipt',
                            params: {
                                wgrastUid: wgrastUid,
                                cancelQuan: cancelQuan,
                                lotNo: lotNo,
                                expDate: expDate,
                                cancelDate: cancelDate,
                                cancelContent: cancelContent
                            },
                            success: function (result, request) {
                                gm.me().showToast('결과', '입고 취소하었습니다.');
                                gm.me().getStore().load(function () {
                                });
                                gm.me().setLoading(false);
                                if (prWin) {
                                    prWin.close();
                                }

                            },
                            failure: extjsUtil.failureMessage
                        });
                    }
                },
                {
                    text: CMD_CANCEL,
                    scope: this,
                    handler: function () {
                        if (prWin) {
                            prWin.close();
                        }
                    }
                }
            ]
        });

        prWin.show();
    }
});
